const { FastDate } = require('./../src/main')

describe('FastDate methods', () => {
  it('FastDate:constructor() should behave like Date:constructor() method', () => {
    let dateO = new Date().setSeconds(0, 0)
    let dateN = new FastDate().setSeconds(0, 0)
    expect(dateN).toBe(dateO)
    dateO = new Date('2017-01-01')
    dateN = new FastDate('2017-01-01')
    expect(dateN.valueOf()).toEqual(dateO.valueOf())

    dateO = new Date(2017, 1, 1)
    dateN = new FastDate(2017, 1, 1)
    expect(dateN.valueOf()).toEqual(dateO.valueOf())
  })
  it('FastDate:getDate() should behave like Date:getDate() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getDate()).toEqual(dateO.getDate())
  })
  it('FastDate:getDay() should behave like Date:getDay() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getDay()).toEqual(dateO.getDay())
  })
  it('FastDate:getFullYear() should behave like Date:getFullYear() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getFullYear()).toEqual(dateO.getFullYear())
  })
  it('FastDate:getHours() should behave like Date:getHours() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getHours()).toEqual(dateO.getHours())
  })
  it('FastDate:getMilliseconds() should behave like Date:getMilliseconds() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getMilliseconds()).toEqual(dateO.getMilliseconds())
  })
  it('FastDate:getMinutes() should behave like Date:getMinutes() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getMinutes()).toEqual(dateO.getMinutes())
  })
  it('FastDate:getMonth() should behave like Date:getMonth() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getMonth()).toEqual(dateO.getMonth())
  })
  it('FastDate:getSeconds() should behave like Date:getSeconds() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getSeconds()).toEqual(dateO.getSeconds())
  })
  it('FastDate:getTime() should behave like Date:getTime() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getTime()).toEqual(dateO.getTime())
  })
  it('FastDate:getTimezoneOffset() should behave like Date:getTimezoneOffset() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getTimezoneOffset()).toEqual(dateO.getTimezoneOffset())
  })
  it('FastDate:getUTCDate() should behave like Date:getUTCDate() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getUTCDate()).toEqual(dateO.getUTCDate())
  })
  it('FastDate:getUTCDay() should behave like Date:getUTCDay() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getUTCDay()).toEqual(dateO.getUTCDay())
  })
  it('FastDate:getUTCFullYear() should behave like Date:getUTCFullYear() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getUTCFullYear()).toEqual(dateO.getUTCFullYear())
  })
  it('FastDate:getUTCHours() should behave like Date:getUTCHours() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getUTCHours()).toEqual(dateO.getUTCHours())
  })
  it('FastDate:getUTCMilliseconds() should behave like Date:getUTCMilliseconds() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getUTCMilliseconds()).toEqual(dateO.getUTCMilliseconds())
  })
  it('FastDate:getUTCMinutes() should behave like Date:getUTCMinutes() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getUTCMinutes()).toEqual(dateO.getUTCMinutes())
  })
  it('FastDate:getUTCMonth() should behave like Date:getUTCMonth() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getUTCMonth()).toEqual(dateO.getUTCMonth())
  })
  it('FastDate:getUTCSeconds() should behave like Date:getUTCSeconds() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getUTCSeconds()).toEqual(dateO.getUTCSeconds())
  })
  it('FastDate:getYear() should behave like Date:getYear() method', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.getYear()).toEqual(dateO.getYear())
  })

  it('FastDate:toDateString() should behave like Date:toDateString()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.toDateString()).toEqual(dateO.toDateString())
  })
  it('FastDate:toISOString() should behave like Date:toISOString()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.toISOString()).toEqual(dateO.toISOString())
  })
  it('FastDate:toJSON() should behave like Date:toJSON()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.toJSON()).toEqual(dateO.toJSON())
  })
  it('FastDate:toGMTString() should behave like Date:toGMTString()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.toGMTString()).toEqual(dateO.toGMTString())
  })
  it('FastDate:toLocaleDateString() should behave like Date:toLocaleDateString()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.toLocaleDateString()).toEqual(dateO.toLocaleDateString())
  })
  it('FastDate:toLocaleString() should behave like Date:toLocaleString()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.toLocaleString()).toEqual(dateO.toLocaleString())
  })
  it('FastDate:toLocaleTimeString() should behave like Date:toLocaleTimeString()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.toLocaleTimeString()).toEqual(dateO.toLocaleTimeString())
  })
  it('FastDate:toString() should behave like Date:toString()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.toString()).toEqual(dateO.toString())
  })
  it('FastDate:toTimeString() should behave like Date:toTimeString()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.toTimeString()).toEqual(dateO.toTimeString())
  })
  it('FastDate:toUTCString() should behave like Date:toUTCString()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.toUTCString()).toEqual(dateO.toUTCString())
  })
  it('FastDate:valueOf() should behave like Date:valueOf()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.valueOf()).toEqual(dateO.valueOf())
  })
  it('FastDate:setDate() should behave like Date:setDate()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setDate(10)).toEqual(dateO.setDate(10))
  })
  it('FastDate:setFullYear() should behave like Date:setFullYear()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setFullYear(2016)).toEqual(dateO.setFullYear(2016))
    expect(dateN.setFullYear(2016, 10)).toEqual(dateO.setFullYear(2016, 10))
    expect(dateN.setFullYear(2016, 10, 11)).toEqual(dateO.setFullYear(2016, 10, 11))
  })
  it('FastDate:setHours() should behave like Date:setHours()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setHours(10)).toEqual(dateO.setHours(10))
    expect(dateN.setHours(10, 10)).toEqual(dateO.setHours(10, 10))
    expect(dateN.setHours(10, 10, 10)).toEqual(dateO.setHours(10, 10, 10))
    expect(dateN.setHours(10, 10, 10, 999)).toEqual(dateO.setHours(10, 10, 10, 999))
  })
  it('FastDate:setMilliseconds() should behave like Date:setMilliseconds()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setMilliseconds()).toEqual(dateO.setMilliseconds())
    expect(dateN.setMilliseconds(100)).toEqual(dateO.setMilliseconds(100))
  })
  it('FastDate:setMinutes() should behave like Date:setMinutes()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setMinutes()).toEqual(dateO.setMinutes())
    expect(dateN.setMinutes(10)).toEqual(dateO.setMinutes(10))
    expect(dateN.setMinutes(10, 10)).toEqual(dateO.setMinutes(10, 10))
    expect(dateN.setMinutes(10, 10, 555)).toEqual(dateO.setMinutes(10, 10, 555))
  })
  it('FastDate:setMonth() should behave like Date:setMonth()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setMonth(10)).toEqual(dateO.setMonth(10))
    expect(dateN.setMonth(10, 5)).toEqual(dateO.setMonth(10, 5))
  })
  it('FastDate:setSeconds() should behave like Date:setSeconds()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setSeconds()).toEqual(dateO.setSeconds())
    expect(dateN.setSeconds(10)).toEqual(dateO.setSeconds(10))
    expect(dateN.setSeconds(10, 15)).toEqual(dateO.setSeconds(10, 15))
  })
  it('FastDate:setTime() should behave like Date:setTime()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setTime()).toEqual(dateO.setTime())
    expect(dateN.setTime(0)).toEqual(dateO.setTime(0))
    expect(dateN.setTime(9182)).toEqual(dateO.setTime(9182))
  })
  it('FastDate:setUTCDate() should behave like Date:setUTCDate()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setUTCDate()).toEqual(dateO.setUTCDate())
    expect(dateN.setUTCDate(10)).toEqual(dateO.setUTCDate(10))
  })
  it('FastDate:setUTCFullYear() should behave like Date:setUTCFullYear()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setUTCFullYear(2016)).toEqual(dateO.setUTCFullYear(2016))
    expect(dateN.setUTCFullYear(2016, 10)).toEqual(dateO.setUTCFullYear(2016, 10))
    expect(dateN.setUTCFullYear(2016, 10, 11)).toEqual(dateO.setUTCFullYear(2016, 10, 11))
  })
  it('FastDate:setUTCHours() should behave like Date:setUTCHours()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setUTCHours(10)).toEqual(dateO.setUTCHours(10))
    expect(dateN.setUTCHours(10, 10)).toEqual(dateO.setUTCHours(10, 10))
    expect(dateN.setUTCHours(10, 10, 10)).toEqual(dateO.setUTCHours(10, 10, 10))
    expect(dateN.setUTCHours(10, 10, 10, 999)).toEqual(dateO.setUTCHours(10, 10, 10, 999))
  })
  it('FastDate:setUTCMilliseconds() should behave like Date:setUTCMilliseconds()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setUTCMilliseconds()).toEqual(dateO.setUTCMilliseconds())
    expect(dateN.setUTCMilliseconds(100)).toEqual(dateO.setUTCMilliseconds(100))
  })
  it('FastDate:setUTCMinutes() should behave like Date:setUTCMinutes()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setUTCMinutes()).toEqual(dateO.setUTCMinutes())
    expect(dateN.setUTCMinutes(10)).toEqual(dateO.setUTCMinutes(10))
    expect(dateN.setUTCMinutes(10, 10)).toEqual(dateO.setUTCMinutes(10, 10))
    expect(dateN.setUTCMinutes(10, 10, 555)).toEqual(dateO.setUTCMinutes(10, 10, 555))
  })
  it('FastDate:setUTCMonth() should behave like Date:setUTCMonth()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setUTCMonth()).toEqual(dateO.setUTCMonth())
    expect(dateN.setUTCMonth(10)).toEqual(dateO.setUTCMonth(10))
    expect(dateN.setUTCMonth(10, 5)).toEqual(dateO.setUTCMonth(10, 5))
  })
  it('FastDate:setUTCSeconds() should behave like Date:setUTCSeconds()', () => {
    const dateO = new Date()
    const dateN = new FastDate(dateO)
    expect(dateN.setUTCSeconds()).toEqual(dateO.setUTCSeconds())
    expect(dateN.setUTCSeconds(10)).toEqual(dateO.setUTCSeconds(10))
    expect(dateN.setUTCSeconds(10, 15)).toEqual(dateO.setUTCSeconds(10, 15))
  })
  it('FastDate:isJustDate() should return dates created with args like "2017-01-01" and (2017, 0, 1)', () => {
    expect(new FastDate(2017, 0, 1).isJustDate()).toBeTruthy()
    expect(new FastDate('2017-01-01').isJustDate()).toBeTruthy()
    expect(new FastDate(2017, 0, 1, 10, 10, 10, 0).isJustDate()).toBeFalsy()
    expect(new FastDate('2017-01-01T10:10:10.000Z').isJustDate()).toBeFalsy()
  })
})
